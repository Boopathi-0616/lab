                                "Naive Bayesian Classifier to compute the accuracy, precision, and recall"


Required Libraries: pip install scikit-learn

Program:
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report

# Load the Iris dataset
data = load_iris()
X = data.data  # Features
y = data.target  # Labels

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Naive Bayes Classifier
model = GaussianNB()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Compute accuracy, precision, and recall
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')

# Print the results
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)

# Detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=data.target_names))



Output:

Accuracy: 1.0
Precision: 1.0
Recall: 1.0

Classification Report:
              precision    recall  f1-score   support

    setosa       1.00      1.00      1.00        16
    versicolor   1.00      1.00      1.00        14
    virginica    1.00      1.00      1.00        15

    accuracy                           1.00        45
    macro avg    1.00      1.00      1.00        45
    weighted avg 1.00      1.00      1.00        45